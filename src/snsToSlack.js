var https = require('https');
var util = require('util');

exports.handler = function (event, context) {


    // Configuration
    // enter your slack webhook url (generated by slack)

    var slackWebHookURI = '/services/xxx/xxx/xxx';

    // Add aws service names and icons if needed
    // matching is done via the Message subject
    // if not matched the service is "CloudWatch"

    var awsServicesFromSubjectSubstring = {
        'RDS': {
            name: 'AWS RDS',
            icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/AWS_Simple_Icons_Database_Amazon_RDS.svg/200px-AWS_Simple_Icons_Database_Amazon_RDS.svg.png'
        },
        'CodePipeline': {
            name: 'AWS CodePipeline',
            icon: 'https://www.awsomeblog.com/wp-content/uploads/2016/05/aws-codepipeline.png'
        }
    };

    // Add severities (color in slack)
    // matching is done via the message body as string (JSON encoded)
    // if not matched the severity is "warning"

    var awsSeverityFromMessageSubstring = {

        // severity: good

        '\"NewStateValue\":\"OK\"': 'good',
        'Finished applying modification to DB instance class': 'good',
        'Replication for the Read Replica resumed': 'good',
        'Multi-AZ instance failover completed': 'good',

        // severity: danger

        '\"NewStateValue\":\"ALARM\"': 'danger',
        'Read Replica Replication Error': 'danger'
    };


    // Initializing

    var item, item_sub;

    var postData = {
        "username": "AWS SNS",
        "text": "snsToSlack Notification (possibly unhandled)"
    };

    String.prototype.rfill = function (fill, length) {
        var str = this;
        while (str.length < length)
            str = str + fill;
        return str;
    };

    if (typeof event.Records[0].Sns.Type != "undefined" && event.Records[0].Sns.Type == "Notification") {

        // fetch AWS service from subject

        var awsService = {
            name: 'AWS CloudWatch',
            icon: 'https://www.awsomeblog.com/wp-content/uploads/2016/01/cloudwatch.png'
        };


        for (item in awsServicesFromSubjectSubstring) {

            if (!awsServicesFromSubjectSubstring.hasOwnProperty(item)) {
                continue;
            }

            if (event.Records[0].Sns.Subject.indexOf(item) != -1) {
                awsService = awsServicesFromSubjectSubstring[item];
                break;
            }
        }

        // fetch severity

        var awsSeverity = 'warning';

        for (item in awsSeverityFromMessageSubstring) {

            if (!awsSeverityFromMessageSubstring.hasOwnProperty(item)) {
                continue;
            }

            if (event.Records[0].Sns.Message.indexOf(item) != -1) {

                awsSeverity = awsSeverityFromMessageSubstring[item];
                break;
            }
        }

        // fetch message

        var message = JSON.parse(event.Records[0].Sns.Message);

        var fields = [];
        var fields_long = [];
        var fields_short = [];
        var fields_submessage = [];

        for (item in message) {

            if (!message.hasOwnProperty(item)) {
                continue;
            }

            if (typeof message[item] !== "string") {

                for (item_sub in message[item]) {

                    if (!message[item].hasOwnProperty(item_sub)) {
                        continue;
                    }

                    if (!message[item][item_sub]) {
                        continue;
                    }

                    fields_submessage.push({
                        'title': item_sub,
                        'value': message[item][item_sub]
                    });
                }

            } else {

                if (message[item].length < 35) {

                    fields_short.push({
                        'title': item,
                        'value': message[item],
                        'short': true
                    });

                } else {

                    fields_long.push({
                        'title': item,
                        'value': message[item],
                        'short': false
                    });
                }
            }
        }

        // render fields_submessage as text

        // get max key length

        var max_length = 0;
        for (item in fields_submessage) {

            if (!fields_submessage.hasOwnProperty(item)) {
                continue;
            }

            if (typeof fields_submessage[item].value === "string") {
                max_length = Math.max(max_length, fields_submessage[item].title.length);
            }
        }

        // render submessage fields at a pre-formatted table

        var str_submessage = '';

        for (item in fields_submessage) {

            if (!fields_submessage.hasOwnProperty(item)) {
                continue;
            }

            if (typeof fields_submessage[item].value === "object") {
                fields_submessage[item].value = JSON.stringify(fields_submessage[item].value);
            }

            str_submessage += fields_submessage[item].title.rfill(' ', max_length) + ' : ' + fields_submessage[item].value + '\n';
        }

        if (str_submessage) {
            str_submessage = '```' + str_submessage + '```';
        }

        // sort short fields first

        for (item in fields_short) {
            fields.push(fields_short[item]);
        }

        for (item in fields_long) {
            fields.push(fields_long[item]);
        }

        // create slack message

        postData = {
            'username': 'AWS SNS'
        };

        postData.attachments = [
            {
                'fallback': event.Records[0].Sns.Subject,
                'color': awsSeverity,
                //'pretext': '(<' + message.consoleLink + '|open aws-console>)',
                'author_name': awsService.name,
                'author_icon': awsService.icon,
                'title': event.Records[0].Sns.Subject,
                //'title_link': message.approval.approvalReviewLink,
                'text': str_submessage,
                'fields': fields,
                'mrkdwn_in': ["pretext", "text", "fields"],
                'footer': 'AWS SNS Message',
                'footer_icon': 'https://d0.awsstatic.com/icons/SimpleIcon_SNS.png',
                'ts': Math.round(new Date(event.Records[0].Sns.Timestamp).getTime() / 1000)
            }
        ];
    }

    var options = {
        method: 'POST',
        hostname: 'hooks.slack.com',
        port: 443,
        path: slackWebHookURI
    };

    var req = https.request(options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            context.done(null);
        });
    });

    req.on('error', function (e) {
        console.log('problem with request: ' + e.message);
    });

    req.write(util.format("%j", postData));
    req.end();
};